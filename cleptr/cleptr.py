import pathlib, argparse, sys, os, logging
from cleptr.version import __version__
from cleptr.RunCleptr import InitCleptr,RunCleptr,ReportCleptr
"""
cleptr - a nomenclature generator tool for cgmlst profiles

"""

def init_db(args):
    dbs = InitCleptr(args)
    dbs.init_db()
   
def run_cleptr(args):

   _names = RunCleptr(args)
   _names.update_db()

def report_cleptr(args):

   _report = ReportCleptr(args)
   _report.report()

def set_parsers():
    parser = argparse.ArgumentParser(
        description="Generate nomenclature for cgMLST profiles", formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)
    
    subparsers = parser.add_subparsers(help="Task to perform")
    parser_sub_init = subparsers.add_parser('init', help='Initialise nomenclature', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser_sub_init.add_argument(
       '--input',
       '-i',
       help = "A clusters file - output from a coreugate run. Required",
       default = ""
    )
    parser_sub_init.add_argument(
       '--cluster_col',
       help = "The column name for cluster threshold which defines the nomenclature",
       default = ""       
    )
    parser_sub_init.add_argument(
       '--database_name',
       help = "The name of the database used to generage cgMLST",
       default = ""       
    )
    parser_sub_init.add_argument(
       '--prefix',
       help = "The prefix for db files.",
       default = ""       
    )
    parser_sub_init.add_argument(
       '--id_col',
       help = "The column name for sequence/sample ID",
       default = "ID"       
    )
    parser_sub_run = subparsers.add_parser('run', help='Run cleptr', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser_sub_run.add_argument(
       '--input',
       '-i',
       help = "A clusters file - output from a coreugate run. Required",
       default = ""
    )
    parser_sub_run.add_argument(
       '--sample_db',
       '-s',
       help = "A sample_db (.json), generated by a previous run of cleptr. Required",
       default = ""
    )
    parser_sub_run.add_argument(
       '--clusters_db',
       '-c',
       help = "A clusters_db (.json), generated by a previous run of cleptr. Required",
       default = ""
    )
    parser_sub_run.add_argument(
       '--cluster_col',
       help = "The column name for cluster threshold which defines the nomenclature",
       default = ""       
    )
    parser_sub_run.add_argument(
       '--id_col',
       help = "The column name for sequence/sample ID",
       default = "ID"       
    )
    parser_sub_run.add_argument(
       '--database_name',
       help = "The name of the database used to generage cgMLST",
       default = ""       
    )
    parser_sub_report = subparsers.add_parser('report', help='Generate a report', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser_sub_report.add_argument(
        '--sample_db',
        '-s',
        help = "A sample_db (.json), generated by a previous run of cleptr. Required",
        default = ""
    )
    parser_sub_report.add_argument(
        '--metadata',
        '-m',
        help = "Optional additional metadata for reporting - only include samples for which reporting is desired. \
                Default will report all samples in the DB.",
        default = ""
    )
    parser_sub_report.add_argument(
        '--prefix',
        '-p',
        help = "Prefix for naming output file.",
        default = ""
    )
    parser_sub_report.add_argument(
       '--id_col',
       help = "The column name for sequence/sample ID",
       default = "ID"       
    )
    
    
        
    parser_sub_init.set_defaults(func=init_db)
    parser_sub_run.set_defaults(func=run_cleptr)
    parser_sub_report.set_defaults(func=report_cleptr)
    args = parser.parse_args()
    return args


def main():
    """
    run pipeline
    """

    args = set_parsers()
    if vars(args) == {}:
        parser.print_help(sys.stderr)
    else:
        args.func(args)
    

if __name__ == "__main__":
    main()
