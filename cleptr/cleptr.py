import pathlib, argparse, sys, os, logging
from cleptr.version import __version__

"""
cleptr - a nomenclature generator tool for cgmlst profiles

"""

def some_function(args):
    pass

def set_parsers():
    parser = argparse.ArgumentParser(
        description="Generate nomenclature for cgMLST profiles", formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)
    
    subparsers = parser.add_subparsers(help="Task to perform")
    parser_sub_run = subparsers.add_parser('init', help='Initialise nomenclature', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser_sub_run.add_argument(
       '--input',
       '-i',
       help = "A clusters file - output from a coreugate run. Required",
       default = ""
    )
    parser_sub_run = subparsers.add_parser('run', help='Run cleptr', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser_sub_run.add_argument(
       '--input',
       '-i',
       help = "A clusters file - output from a coreugate run. Required",
       default = ""
    )
    parser_sub_run.add_argument(
       '--sample_db',
       '-s',
       help = "A sample_db (.json), generated by a previous run of cleptr. Required",
       default = ""
    )
    parser_sub_run.add_argument(
       '--clusters_db',
       '-c',
       help = "A clusters_db (.json), generated by a previous run of cleptr. Required",
       default = ""
    )
    parser_sub_report = subparsers.add_parser('report', help='Generate a report', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser_sub_report.add_argument(
        '--sample_db',
        '-s',
        help = "A sample_db (.json), generated by a previous run of cleptr. Required",
        default = ""
    )
    parser_sub_report.add_argument(
        '--metadata',
        '-m',
        help = "Optional additional metadata for reporting - only include samples for which reporting is desired. \
                Default will report all samples in the DB.",
        default = ""
    )
    
        
    parser_sub_run.set_defaults(func=some_function)
    args = parser.parse_args()
    return args


def main():
    """
    run pipeline
    """

    args = set_parsers()
    if vars(args) == {}:
        parser.print_help(sys.stderr)
    else:
        args.func(args)
    

if __name__ == "__main__":
    main()
